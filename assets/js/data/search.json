[ { "title": "Utilitech - UTTNOREM2", "url": "/posts/UtilitechUTTNOREM2/", "categories": "homelab, other", "tags": "utilitech, rf, hackrf, urh", "date": "2024-02-18 05:00:00 -0800", "snippet": " Picked up a few of these outdoor wireless remote control outlets over the past few weeks. They are not bluetooth or wifi and seem to be operate like a garage door opener with and on and off butto...", "content": " Picked up a few of these outdoor wireless remote control outlets over the past few weeks. They are not bluetooth or wifi and seem to be operate like a garage door opener with and on and off button Device Info Model: UTTNOREM2 (0357410) Plug-in remote control FCC ID: QJXTNOREM02 Model: UTTNOREM2 (T-001) Battery Powered Remote FCC ID: QJXT-001Acquisition I picked up 3x of these over the past few weeks from the local return auction. Two came with both the plug and transmitter but one only had the outlet plug Overall, spent only about $15.00 for the three of them which is a good deal considering brand new they are around $12-15 eachFCC lookup Loking up the FCC ID online https://fcc.report/FCC-ID/QJXTNOREM02 https://fcc.report/FCC-ID/QJXT-001 Receiver Internal Photos Internal photos from FCC database Do not see any modern style IOT chipset Out of the case Looks like this little PCB has the antenna and most likely A/D signal processingTransmitter No internal photos on FCC site Has frequency range on the FCC application Opened one of the transmitters up to take a look inside. Powered by a CR2032 3V batteryWireless Exploits Seems like a good target to try to capture the RF signal at 315MHZ and try to do a replay attack and also figure out the coding The transmitters are paired with the outlets by pressing both on and off simultaneously in the first 10-15 secs of the outlets being powered on I beleive this means the transmitter holds the magic and generates the unique parameters for the outlets to accept and then store in memory to listen for on and off triggers The outlets can be paired with both transmittters labeled as 0323 and 0623 Assuming those numbers might come up during analysis of the signals and unique identifiers…. HackRF One Using my Aliexpress knockoff HackRF OneUniversal Radio Hacker Download latest release of Universal Radio Hacker https://github.com/jopohl/urh/releases/tag/v2.9.6 Record Signal Record the on and off signals from the 0323 transmitterAnalysis - Interpretation Tab Interpretation tab shows the signal just captured Can leverage the Autodetect parameters functionality of URH and let it do some guessing for us Initial parameter guess assigned it as an Amplitude Shift Key signal with 1400 samples/symbol… which seems off Zooming in on one message block, there appears to be 25 messages that are repeated for both on and off Using some made up logic (maybe it’s correct) and assuming some factor of 8 the Samples/Symbol is set to 200 (25x8) and the data viewed in hex cleans up nicely On Message » c0300fe3f8c03f8fe300c0300fe300fe3f8fe300c03f8c0300fe300c0300c Off Message » c0300fe3f8c03f8fe300c0300fe300fe3f8fe300c03f8c0300c03f8c0300c Quick visual comparison and only 5 symbols are different between the two fe300 and c03f8 Analysis - Analysis Tab Moving over to the Analysis Tab the differences are highlighted showing the two different hex pairs Clicking on the Analyze Protocol Button it creates 3 labels for synchronization, sequence number and length Not quite sure if this breakout and assignment is correct or actually means anything…. Analysis - Generator Tab Dragging the on_off signal into the generator tab to try to create our own signal vs just replaying the captured signal It successfully turns the outlet on and offPair Signal Repeating the same steps as above to capture and analyze the pair signal for the 0323 transmitterBreakout Analysis Trying to just visual and understand the differences… ON (0323) c0300fe3f8c03f8fe300c0300fe300fe3f8fe300c03f8c0300fe300c0300c fe300 unique symbols » fe 00 OFF (0323) c0300fe3f8c03f8fe300c0300fe300fe3f8fe300c03f8c0300c03f8c0300c c03f8 unique symbols » c0 f8 PAIR (0323) c0300fe3f8c03f8fe300c0300fe300fe3f8fe300c03f8c0300fe3f8c0300c fe3f8 unique symbols » fe f8 Repeat with other transmitterRepeat with 0623 Transmitter Captured the on, off and pairing signals and walked through the same steps as above to break down to the anlaysis tab. Differences in analysis tab show entire sequence is different and not just the 4 hex values above. Samples/Symbol were also set to 300 vs 200 on the 0323 transmitter… think I’m definetly just making stuff up… ON (0623) c01fc7f1fc7f1fc7f180c060301fc60301fc7f180fe3f8c07f180180c06 OFF (0623) c01fc7f1fc7f1fc7f180c060301fc60301fc7f180fe3f8c0603f8180c06 PAIR (0623) c07f1fc7f1fc7f1fc6030180c07f180c07f1fc603f8fe301fc7f180c06 0623 Table [on&gt;off&gt;pair]c07f1fc7f1fc7f1fc6030180c07f180c07f1fc603f8fe301fc6030180cc07f1fc7f1fc7f1fc6030180c07f180c07f1fc603f8fe30180fe30180cc07f1fc7f1fc7f1fc6030180c07f180c07f1fc603f8fe301fc7f180c06 Last 10 hex values differ 0323 Table [on&gt;off&gt;pair] c0300fe3f8c03f8fe300c0300fe300fe3f8fe300c03f8c0300fe300c0300cc0300fe3f8c03f8fe300c0300fe300fe3f8fe300c03f8c0300c03f8c0300cc0300fe3f8c03f8fe300c0300fe300fe3f8fe300c03f8c0300fe3f8c0300c Both [0323 then 0623]c0300fe3f8c03f8fe300c0300fe300fe3f8fe300c03f8c0300fe300c0300cc0300fe3f8c03f8fe300c0300fe300fe3f8fe300c03f8c0300c03f8c0300cc0300fe3f8c03f8fe300c0300fe300fe3f8fe300c03f8c0300fe3f8c0300cc07f1fc7f1fc7f1fc6030180c07f180c07f1fc603f8fe301fc6030180cc07f1fc7f1fc7f1fc6030180c07f180c07f1fc603f8fe30180fe30180cc07f1fc7f1fc7f1fc6030180c07f180c07f1fc603f8fe301fc7f180c06Final Thoughts First time trying to walk through this with universal hacker radio. I have really no idea what I’m doing… but able to replay raw signals and generate signals based on the message breakdowns I don’t understand what is going on inside the data itself and while there appear to be patterns they dont immediately pop out as an “aha that 0323 or 0623 transmitter!” More thoughts and analysis required for sure…." }, { "title": "Enbrighten - WFD4103", "url": "/posts/enbrightenWFD4103/", "categories": "homelab, IOT", "tags": "bk7321t, iot, enbrighten, wifi, bt", "date": "2024-02-11 09:00:00 -0800", "snippet": " Single smart outlet plug by Enbrighten picked up at the local auction return this week. Below captures my thought process and notes as I attempted to get this flashed over to ESPHome and Home As...", "content": " Single smart outlet plug by Enbrighten picked up at the local auction return this week. Below captures my thought process and notes as I attempted to get this flashed over to ESPHome and Home Assistant. My initial thoughts about the device turned out to be wrong upon opening it up.Device Info Model: WFD4103 FCC ID: QOB-WFD4103 Acquisition Another cheap win at only $3. These go for $10-20 new.FCC lookup Loking up the FCC ID online https://fcc.report/FCC-ID/QOB-WFD4103 Change of ID letter point to another FCC ID https://fcc.report/FCC-ID/2AMV5-SK539-W-A Internal Photos Internal photos found for the older FCC ID Looks like it’s a CB2S moduleCB2S Module Pin diagram available online https://developer.tuya.com/en/docs/iot/cb2s-module-datasheet?id=Kafgfsa2aaypq Wireless Exploits Since this is a single plug and is not held together by screws and compression… I’m hoping the tuya-cloudcutter will work instead of having to potentially destroy and rip apart the plaster case. Tuya-Cloudcutter https://github.com/tuya-cloudcutter/tuya-cloudcutter “This repository contains the toolchain to exploit a wireless vulnerability that can jailbreak some of the latest smart devices built with the bk7231 chipset under various brand names by Tuya. “ run sudo ./tuya-cloudcutter.sh and let it build a fresh docker image no profile for the 4103, but a 4103E. Upon selecting however, shows a BK7321T firmware but if this is a CB2S module then it should be an “N” Looking at the other option it is a BK7231N firmwareResults Not succesful trying flash both profiles. Most likely these two other pre-built profiles have different keys or something that is different enough it wont autheticate and allow the re-write. Or I keep screwing up the last part powering back on the device and it exits running the script too soon. Guess it’s on to opening it up….Teardown &amp; ConnectionsExternal Photos Turned on the poor mans hot plate to try to heat and soften the glue before trying to separate the top and bottom parts of the plug. Heat helped a little but still required a good bit of cutting through and prying up Internal Photos It’s a WB2S not a CB2S like I was thinking from the FCC research… WB2S pinout Connecting it all upFirmware Dump Serial to USB converter connected up to computer and ltchiptool was used to interact with the CB2S module. https://github.com/libretiny-eu/ltchiptool Chip Info Looking at the chip infoRead Flash Firmware saved and read back in to look at pin configurationESPHomeESPHome Configesphome: name: enbrighten-wfd4103-2 friendly_name: enbrighten-wfd4103-2bk72xx: board: generic-bk7231t-qfn32-tuyalogger:web_server:captive_portal:mdns:api:ota:wifi: ssid: !secret wifi_ssid2 password: !secret wifi_password2 fast_connect: true manual_ip: static_ip: 192.168.xx.xx gateway: 192.168.xx.1 subnet: 255.255.255.0text_sensor: - platform: libretiny version: name: LibreTiny Versionbinary_sensor: - platform: gpio id: binary_switch_1 pin: number: P26 inverted: true mode: INPUT_PULLUP on_press: then: - switch.toggle: switch_1switch: - platform: gpio id: switch_1 name: Relay 1 pin: P24status_led: pin: number: P7 inverted: true In Home Assistant and ESPHome, a new device is created matching the device name in the YAML. Device can be installed, downloaded and flashed using LTChiptool. ESPHome Operation After flashing, the device was put back together and then plugged into an outlet. After a few seconds the device popped up on Home Assistant as a new Device. ESPHome dashboard showing information and relay operation Webserver view showing the same individual control of the relay and OTA upload optionFinal Thoughts Was hoping this would work with Tuya Cloud-cutter instead of having to open and flash it manually. Another simple little smart plug integrated with Home Assistant. I will start looking at how to contribute firmware and profiles back to the repo so in the future others can have it working for this model." }, { "title": "Enbrighten - WFD4204", "url": "/posts/enbrightenWDF4204/", "categories": "homelab, IOT", "tags": "bk7321n, iot, enbrighten, wifi, bt", "date": "2024-02-03 12:00:00 -0800", "snippet": "Device Info Model # 74517 - WDF4204 FCC ID: QOBWFD4204Acquisition Got this 6 outlet smart outdoor yard stake from the local return auction for $2.50. Normally these go for $10-20.FCC ID Lookup ...", "content": "Device Info Model # 74517 - WDF4204 FCC ID: QOBWFD4204Acquisition Got this 6 outlet smart outdoor yard stake from the local return auction for $2.50. Normally these go for $10-20.FCC ID Lookup Look up the model number online to get an idea of what to expect inside https://fccid.io/QOBWFD4204 Internal Photos User Manual CB2S Module Pin diagram available online https://developer.tuya.com/en/docs/iot/cb2s-module-datasheet?id=Kafgfsa2aaypq Pin number Symbol I/O type Function   1 3V3 P Power supply 3V3   2 P6 I/O Support hardware PWM and correspond to P6 of the IC   3 GND P Power supply reference ground   4 P7 I/O Support hardware PWM and correspond to P7 of the IC   5 RX1 I/O UART_RX1, which is used for receiving user data and corresponds to P10 of the IC. Do not pull it up. By default, the MCU serial port should be in low-level or high-impedance state.   6 P8 I/O Support hardware PWM and correspond to P8 of the IC   7 TX1 I/O UART_TX1, which is used for transmitting user data and corresponds to P11 of the IC. Do not pull it up. By default, the MCU serial port should be in low-level or high-impedance state.   8 ADC I/O ADC, which corresponds to P23 of the IC   9 P24 I/O Support hardware PWM and correspond to P24 of the IC   10 CEN I/O Reset pin   11 P26 I/O Support hardware PWM and correspond to P26 of the IC   Test point RX2 I/O UART_RX2, which corresponds to P1 of the IC. This pin is not allowed to use.   Test point TX2 I/O UART_TX2, which is used for outputting logs and corresponds to P0 of the IC   Test point CSN I/O Mode selection pin. If it is connected to the ground before being powered on, enter the firmware test mode. If it is not connected or connected to VCC before being powered on, enter the firmware application mode. It corresponds to P21 of the IC.   Drawing of the front and back of moduleWireless Exploits There has been alot of great work on exploiting these IOT devices that are associated with the TUYA system of systems. The Tuya-Cloudcutter software has been updated and figured I’d give this another shot. I had tried to use this a year or so back without luck, maybe this device will be different… Tuya-Cloudcutter https://github.com/tuya-cloudcutter/tuya-cloudcutter “This repository contains the toolchain to exploit a wireless vulnerability that can jailbreak some of the latest smart devices built with the bk7231 chipset under various brand names by Tuya. “ Background on the exploit https://rb9.nl/posts/2022-03-29-light-jailbreaking-exploiting-tuya-iot-devices/ DigiblurDIY Guide I followed DigiblurDIY’s guide to setup a Raspberry Pi 4 (8GB RAM) to work the exploit. https://digiblur.com/2023/08/19/updated-tuya-cloudcutter-with-esphome-bk7231-how-to-guide/ Total Failure After setting all this up… turns out the device when plugged in would not even power on…. had to crack it open anyways to look at the hardware.Teardown &amp; ConnectionsExternal Photos Gotta love triangle security screws… four of them and the top can come offInternal Photos looks just like the internal photos from FCC database Better look at the CB2S module and the single relay for the 6 outlets Welp…. that might be the issue with it not powering on… Putting it on the pcb holder and mapping out the pins for the serial to usb connection All wired up and connected to the computerFirmware Dump Serial to USB converter connected up to computer and ltchiptool was used to interact with the CB2S module. https://github.com/libretiny-eu/ltchiptool Chip InfoRead Flash Firmware saved twice Reading the firmware with LTChiptool to get pin assignments and configurationsESPHomeESPHome Configesphome: name: enbrighten_WFD4204_1bk72xx: board: generic-bk7231n-qfn32-tuyalogger:web_server:captive_portal:mdns:api:ota:wifi: ssid: !secret wifi_ssid2 password: !secret wifi_password2 ap:text_sensor: - platform: libretiny version: name: LibreTiny Versionbinary_sensor: - platform: gpio id: binary_switch_1 pin: number: P8 inverted: true mode: INPUT_PULLUP on_press: then: - switch.toggle: switch_1switch: - platform: gpio id: switch_1 name: Relay 1 pin: P24status_led: pin: number: P7 inverted: true In Home Assistant and ESPHome, a new device is created matching the device name in the YAML. Device can be installed, downloaded and flashed using LTChiptool.ESPHome Operation After Flashing and power cycling…. device would not integrate with Home Assistant. Router would see the IP address pop up but when attempting to add device into Home Assistant it would not establish a connection. Disconnecting the PCB from the holder and plugging in to 120v the device would not power on. Clearly the damage PCB was not completing the circuit to power on the device.Final Thoughts Was able to read and write to the CB2S module but think the power issues and overall damage to the PCB are going to limit the usefulness of the device. Bright side is if I need a CB2S module for another project this is readily available. Not going to be upset over a $2.50 returned item." }, { "title": "POWSAV - AHR-083", "url": "/posts/powsavAHR083/", "categories": "homelab, IOT", "tags": "bk7321t, iot, powsav, wifi, bt", "date": "2024-02-03 09:00:00 -0800", "snippet": " Eight AC outlets with four always on, four smart outlets and four USB-A ports. Looking up information online this looks to have a BK7321X chip so hopefully a good candidate to flash and convert t...", "content": " Eight AC outlets with four always on, four smart outlets and four USB-A ports. Looking up information online this looks to have a BK7321X chip so hopefully a good candidate to flash and convert to local control with integrations over ESPHome and Home Assistant.Device Info Model: AHR-083 FCC ID: 2amxxahr083 Acquisition Purchased from Amazon. ~$27.00 + Tax. Four Smart outlets, so roughly $7 per smart outlet. Cheaper than some of the alternative one plug smart outlets. https://www.amazon.com/Protector-POWSAV-Outlets-Always-Extension/dp/B0B5G6MDQ6?ref_=ast_sto_dp&amp;th=1 FCC lookup Loking up the FCC ID online https://fcc.report/FCC-ID/2amxxahr083 Model Differences MemoInternal Photos Looks like a WB3S ModuleWB3S Module Looking up the module https://developer.tuya.com/en/docs/iot/wb3s-module-datasheet?id=K9dx20n6hz5n4 Wireless Exploits Try to flash the power strip remotely first. If it doesn’t work then will just open up and direct connect to read and write to the chip. Tuya-Cloudcutter https://github.com/tuya-cloudcutter/tuya-cloudcutter “This repository contains the toolchain to exploit a wireless vulnerability that can jailbreak some of the latest smart devices built with the bk7231 chipset under various brand names by Tuya. “ Setup local copy running on a raspberry pi 4b (8GB RAM) Results Worked through the prompts in Tuya-Cloudcutter After some restarts and connections through the prompts… Did not work » exploit unsuccessful Plan B it is… Cracking it openTeardown &amp; ConnectionsExternal Photos Top and bottom view of the powerstripInternal Photos Pinout mapping for serial to usb from stock WB3S image online Connectin the pinsFirmware Dump Serial to USB converter connected up to computer and ltchiptool was used to interact with the WB3S module. https://github.com/libretiny-eu/ltchiptool Chip Info Reading the chip info Looks like the bootloader version is 1.0.5 and the Cloud-Cutter version was expecting 1.1.8 so… maybe that’s why it didn’t work?Read Flash Saving the firmware Reading firmware back to get pin information and configurations Write ESPHome-Kickstart Instead of setting up a device in ESPHome and downloading the firmware to flash with the direct connection will try out the kickstart flash approach. Download the latest kickstart firmware https://github.com/libretiny-eu/esphome-kickstart/releases/tag/v23.12.15 For this device select » kickstart-bk7231t-2023-12-15.uf2 Write the kickstart-bk7231t-2023-12-15.uf2 to the chip using LTChiptool Power cycle the device and the WIFI AP should appear Connect to AP and the portal should open in the browser Enter Wifi for IOT network and once it joins it pops up in Home Assistant Add the device to integrationsESPHomeESPHome Config With the device added in Home Assistant final touches can be made to clean up config and add static WIFI address.esphome: name: upk2esphome-bk7231tbk72xx: board: generic-bk7231t-qfn32-tuyalogger:#web_server:#captive_portal:mdns:api:ota:wifi: ssid: !secret wifi_ssid2 password: !secret wifi_password2 fast_connect: true manual_ip: static_ip: 192.168.X0.XX gateway: 192.168.X0.1 subnet: 255.255.255.0 dns1: 192.168.X0.1text_sensor: - platform: libretiny version: name: LibreTiny Versionswitch: - platform: gpio id: switch_1 name: Relay 1 pin: P7 - platform: gpio id: switch_2 name: Relay 2 pin: P26 - platform: gpio id: switch_3 name: Relay 3 pin: P24 - platform: gpio id: switch_4 name: Relay 4 pin: P6binary_sensor: - platform: gpio id: binary_switch_all pin: number: P8 inverted: true mode: INPUT_PULLUP on_press: then: - switch.toggle: switch_1 - switch.toggle: switch_2 - switch.toggle: switch_3 - switch.toggle: switch_4status_led: pin: number: P9 inverted: true The device can be OTA updated since it is already integrated with Home AssistantESPHome Operation After OTA check out the device and try out the relay controls in ESPHome DashboardFinal Thoughts Although couldnt get the Tuya-CloudCutter to work the direct flash method using ESPhome-Kickstart was straight forward. With having access to the pin information and the YAML output provided in LTChiptool it might be better to just build the config in ESPHome, download and flash the firmware to reduce the steps and files needed. Powerstrip seems solid overall and look forward to having allways on options as well as individual switched outlets all on the same powerstrip.Second Chance - Tuya-CloudCutter Ordered a second one of these from amazon more recently than the first one. There might be a chance that this second one has a more up to date firmware that is compatible with the cloudcutter. Running CloudCutter Fresh build of docker image Prompt and selections Put device in slow blink mode and script connects and does it’s magic. One physical power off and on required here. Made it to the final step! Flashing the ESPHome-Kicktart firmware!Connecting to new kickstart AP Connecting to AP and going to web browser In ESPHome, build a new device and copy the YAML settings from the other POWSAV power strip. Rename and change WIFI settings. Once OTA upload submitted new device notification pops up in Home Assistant Accepting then integration and trying out the relays in ESPHome Looks successful and works as it should. Nice to not have to do a teardown to flash and then put it all back together." }, { "title": "Enbrighten - WFD4203E", "url": "/posts/enbrightenWFD4203E/", "categories": "homelab, IOT", "tags": "bk7321n, iot, enbrighten, wifi, bt", "date": "2024-02-03 09:00:00 -0800", "snippet": " Dual outdoor smart switch by Enbrighten picked up at the local auction return this week. Device Info Model: WFD4203E FCC ID: QOB-WFD4203 Acquisition Another cheap win at only $3. The...", "content": " Dual outdoor smart switch by Enbrighten picked up at the local auction return this week. Device Info Model: WFD4203E FCC ID: QOB-WFD4203 Acquisition Another cheap win at only $3. These go for $10-20 new.FCC lookup Loking up the FCC ID online https://fcc.report/FCC-ID/QOB-WFD4203 User manual available Internal photos in the database show a CB2S module attached to the main PCB.CB2S Module Pin diagram available online https://developer.tuya.com/en/docs/iot/cb2s-module-datasheet?id=Kafgfsa2aaypq Pin number Symbol I/O type Function   1 3V3 P Power supply 3V3   2 P6 I/O Support hardware PWM and correspond to P6 of the IC   3 GND P Power supply reference ground   4 P7 I/O Support hardware PWM and correspond to P7 of the IC   5 RX1 I/O UART_RX1, which is used for receiving user data and corresponds to P10 of the IC. Do not pull it up. By default, the MCU serial port should be in low-level or high-impedance state.   6 P8 I/O Support hardware PWM and correspond to P8 of the IC   7 TX1 I/O UART_TX1, which is used for transmitting user data and corresponds to P11 of the IC. Do not pull it up. By default, the MCU serial port should be in low-level or high-impedance state.   8 ADC I/O ADC, which corresponds to P23 of the IC   9 P24 I/O Support hardware PWM and correspond to P24 of the IC   10 CEN I/O Reset pin   11 P26 I/O Support hardware PWM and correspond to P26 of the IC   Test point RX2 I/O UART_RX2, which corresponds to P1 of the IC. This pin is not allowed to use.   Test point TX2 I/O UART_TX2, which is used for outputting logs and corresponds to P0 of the IC   Test point CSN I/O Mode selection pin. If it is connected to the ground before being powered on, enter the firmware test mode. If it is not connected or connected to VCC before being powered on, enter the firmware application mode. It corresponds to P21 of the IC.   Drawing of the front and back of moduleTeardown &amp; ConnectionsExternal Photos Packaging opened and returned. Top of device Bottom of device with labelInternal Photos There are four triangle screws holding the back cover on. Once open, the PCB with two relays and the CB2S module are exposed. Orientation of the CB2S module shows 3.3v location towards the top and outside of the PCB. In the PCB holder and IDing 3.3V, GND, RX, TX pin that need to be connected to the serial to usb device Pins connected Powered on and connected to computerFirmware Dump Serial to USB converter connected up to computer and ltchiptool was used to interact with the CB2S module. https://github.com/libretiny-eu/ltchiptool Chip Info Chip info showing the BK7231N chipRead Flash Firmware saved and re-read in LTChiptool to figure out pin assigments and configurationsESPHomeESPHome Configesphome: name: enbrighten-dual-1bk72xx: board: generic-bk7231n-qfn32-tuyalogger:web_server:captive_portal:mdns:api:ota:wifi: ssid: !secret wifi_ssid2 password: !secret wifi_password2 fast_connect: true manual_ip: static_ip: 192.168.X0.XX gateway: 192.168.X0.1 subnet: 255.255.255.0text_sensor: - platform: libretiny version: name: LibreTiny Versionswitch: - platform: gpio id: switch_1 name: Relay 1 pin: P26 on_turn_on: - light.turn_on: light_status on_turn_off: - light.turn_off: light_status - platform: gpio id: switch_2 name: Relay 2 pin: P24 on_turn_on: - light.turn_on: light_status on_turn_off: - light.turn_off: light_statusbinary_sensor: - platform: gpio id: binary_switch_all pin: number: P8 inverted: true mode: INPUT_PULLUP on_press: then: - switch.toggle: switch_1 - switch.toggle: switch_2light: - platform: status_led id: light_status pin: number: P7 inverted: true In Home Assistant and ESPHome, a new device is created matching the device name in the YAML. Device can be installed, downloaded and flashed using LTChiptool.ESPHome Operation After flashing and power cycling the device. Pins were unhooked and the 120V outlet is plugged in. After a few seconds the device joined ESPHome dashboard showin operation and individual relay operation Webserver view showing the same individual control of the relays for each outletFinal Thoughts The device has two 120v outlets that are controlled independantly. This opens up more fine tuning for automations and control for two different devices. With the BK7321N chip on the CB2S the ESPHome YAML can be updated to also add BLE functionality and turn the outdoor device into a BLE relay." }, { "title": "Enbrighten - WFD4201E", "url": "/posts/enbrightenWFD4201E/", "categories": "homelab, IOT", "tags": "bk7321t, iot, enbrighten, wifi, bt", "date": "2024-02-03 05:00:00 -0800", "snippet": " I picked up this dual outdoor smart switch at the local return auction this week. When I see items like this I typically just bid the minimum and if I win…great. Device Info I start with lo...", "content": " I picked up this dual outdoor smart switch at the local return auction this week. When I see items like this I typically just bid the minimum and if I win…great. Device Info I start with looking the device up online and trying to figure out what to expect when I open it up. Model: WFD4201E FCC ID: QOB-WFD4201 https://fcc.report/FCC-ID/QOB-WFD4201/\t* https://fcc.report/FCC-ID/QOB-WFD4201/4852019 No Internal Photos Really not that much information for this specific model in the FCC database. Acquisition Won the auction for this device for only $2.50. Think these are typical in the $10-20 range.Teardown &amp; ConnectionsExternal Photos Product packaging. Looks like it was opened and returned. Taking it out of the packaging, top view Bottom view with device information Internal Photos There are 3 screws holding the case together. Two exposed and one hidden under the sticker. Top of PCB has pin headers [3v, IO0, TX, RX, GND] These did not function when attempting to read and write to the chip. The backside of the PCB had additional pads that worked correctly when trying to interact. Zooming in on the chip and it’s a BK7231TQN32 Backside of the PCB with pads connected for GND, TX, RX. The 3.3v Pad was used from the 5 pin row header visible from the front/back. Firmware Dump Serial to USB converter connected up to computer and ltchiptool was used to interact with the BK7231T chip. https://github.com/libretiny-eu/ltchiptool Chip Info Chip info showing in fact a BK7231T chip and basic tuya protocol. Read Flash I typically save the firmware twice just in case something glitched. Compare the two to make sure they are same size, etc. With the firmware saved, LTchiptool can read it back to view the TUYA pin assignments and configuration.ESPHomeESPHome config Again using LTChiptool the pin config information is used to generate a ESPHome YAML config file for the device. Add in additional WIFI options and remove unwanted extras from the stock YAML generated file. Final result for integration is below.esphome: name: enbrighten-dual-2 friendly_name: enbrighten-dual-2bk72xx: board: generic-bk7231t-qfn32-tuyalogger:web_server:captive_portal:mdns:api:ota:wifi: ssid: !secret wifi_ssid2 password: !secret wifi_password2 fast_connect: true manual_ip: static_ip: 192.168.XX.XX gateway: 192.168.X0.1 subnet: 255.255.255.0text_sensor: - platform: libretiny version: name: LibreTiny Versionoutput: - platform: libretiny_pwm id: output_led_1 pin: number: P8 inverted: truelight: - platform: monochromatic id: light_switch_1 output: output_led_1binary_sensor: - platform: gpio id: binary_switch_1 pin: number: P26 inverted: true mode: INPUT_PULLUP on_press: then: - switch.toggle: switch_1switch: - platform: gpio id: switch_1 name: Relay 1 pin: P24 on_turn_on: - light.turn_on: light_switch_1 on_turn_off: - light.turn_off: light_switch_1status_led: pin: number: P7 inverted: true In Home Assistant and ESPHome, a new device is created matching the device name in the YAML. Device can be installed, downloaded and flashed using LTChiptool.ESPHome Operation After flashing and power cycling the device. Pins were unhooked and the 120V outlet is plugged in. After a few seconds the device joined Operation through home assistant app and webserver on chip successfully turns the single relay on and offFinal Thoughts The device has two 120v outlets but only one relay turning them on and off. Nice thing about this is in addition to the config created above, the BK7321T also supports BLE which could enable this device to act as a relay. Since this is an outdoor device it could capture BLE traffic for sensors outside in the backyard or garden and relay them up to homeassistant over the WIFI." } ]
